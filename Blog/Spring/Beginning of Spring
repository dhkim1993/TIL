#Spring Framwork
Java/JSP 기반의 웹 프레임워크.
로드 존슨(Rod Johnson)이 2002년에 출판한 저서 Expert One-on-One J2EE Design and Development에서
선보인 소스 코드를 시작으로 점점 발전하게 되었다.
2003년 6월에 최초로 공개되었다.
2019년 3월 기준 최신 버전은 5.1.5.

Java Virtual Machine 위에서 돌아가며, 아파치 라이선스 2.0을 따르는 오픈 소스 프레임워크이다.
한국 전자정부표준프레임워크의 기반 기술이며 한국정보화진흥원에서는 공공기관의 웹 서비스 제공 시 스프링을 권장하고 있다.


환경설정이 까다로운 편이나 한 번 환경설정을 마친 시점부터는 개발 속도가 기하급수적으로 상승하기 때문에
기본적으로는 중대형 프로젝트에 적합.

<br>

##주요 특징
1. POJO(Plain Old Java Object) 방식 : POJO는 Java EE를 사용하면서 해당 플랫폼에 종속되어 있는 무거운 객체들을 만드는 것에 반발하며 나타난 용어다. 별도의 프레임워크 없이 Java EE를 사용할 때에 비해 특정 인터페이스를 직접 구현하거나 상속받을 필요가 없어 기존 라이브러리를 지원하기가 용이하고, 객체가 가볍다.

2. 관점 지향 프로그래밍(Aspect Oriented Programming, AOP) : 로깅, 트랜잭션, 보안 등 여러 모듈에서 공통적으로 사용하는 기능을 분리하여 관리할 수 있다. AspectJ를 포함하여 사용할 수 있고, 스프링에서 지원하는 실행에 조합하는 방식도 지원한다.

3. 의존성 주입(Dependency Injection, DI) : 프로그래밍에서 구성요소 간의 의존 관계가 소스코드 내부가 아닌 외부의 설정파일을 통해 정의되는 방식이다. 코드 재사용을 높여 소스코드를 다양한 곳에 사용할 수 있으며 모듈간의 결합도도 낮출 수 있다. 계층, 서비스 간에 의존성이 존재하는 경우 스프링 프레임워크가 서로 연결시켜준다.

4. 제어 반전(Inversion of Control, IoC) : 전통적인 프로그래밍에서는 개발자가 작성한 프로그램이 외부 라이브러리의 코드를 호출해서 이용했다. 제어 반전은 이와 반대로 외부 라이브러리 코드가 개발자의 코드를 호출하게 된다. 즉, 제어권이 프레임워크에게 있어 필요에 따라 스프링 프레임워크가 사용자의 코드를 호출한다.

5. 생명주기 : 스프링 프레임워크는 Java 객체의 생성, 소멸을 직접 관리하며 필요한 객체만 사용할 수 있다.
다양한 서비스 : myBatis와 같은 데이터베이스 처리 라이브러리나 tiles 같은 유용한 인터페이스를 제공한다.

<br>

##환경설정

eclipse 설치(현재 2019년 3월버전이 최신이며 JDK는 1.8버전을 사용합니다.)

eclipse 설치가 완료되었다면 help -> eclipse marketplace 접속 후 spring 검색, spring suite tool 3버전 설치.

설치하면 재시작됩니다. 재시작 후 우상단 open perspective,
혹은 상단의 window -> prespective -> open perspective -> others

선택 후 spring 선택.

spring이 선택되어 있지 않다면 개발 자체는 가능하지만 추후 xml파일 세팅 등에 어려움이 생길 수 있습니다.

추가로 톰캣 설정 등을 해야 합니다.

본 수업에서는 톰캣은 9.0버전을 사용하지만, 8.0이나 8.5버전도 무방합니다.



##프로젝트 생성

프로젝트는 사용자가 밑바닥부터 하나하나 설정을 올려나갈 수도 있지만,

이 수업에서는 이미 완성되어 있는 설정을 수정해서 사용합니다.

이는 집을 기초공사부터 해서 올려나가는가 아니면 이미 완성된 건물을 개조하는가의 차이로 볼 수 있습니다.

완성되어 있는 설정을 수정하기 위해서 우선 프로젝트를 생성합니다.


file -> new -> spring legacy project 를 선택해주신 다음, 프로젝트 이름을 입력하고 Spring MVC Project를 선택합니다.

다음 패키지 명은 계층 3개(aaa.bbb.ccc) 와 같은 형태로 만들어야 합니다.



## Maven 의존성 설정

jsp에서는 라이브러리나 유틸리티를 사용하기 위해서 .jar 파일을 resource 폴더에 넣었어야 했습니다.
그러나 spring에서는 직접적으로 파일을 넣어서 라이브러리를 사용할 수도 있지만 그 보다 보편적으로 사용하는 방식은
바로 pom.xml 이라는 파일 내부에 의존성 설정을 하는 방식입니다.

이는 xml태그를 이용해 라이브러리의 명칭과 버전, 서버주소를 입력하면 자동으로 스프링 프로젝트가 라이브러리 세팅을 완료하는 방식입니다.

spring legacy project를 이용한 생성을 할 경우 밑바닥에서부터 하나하나 설정해주지 않아도
필요한 대다수의 라이브러리가 이미 설정된 상태이기 때문에 상대적으로 신경쓸 부분이 줄어드는 것입니다.
그러나 legacy라는 명칭에서 알 수 있듯이 자바 1.6버전 스프링 3버전 시절의 세팅을 그대로 적용한 버전입니다.

우리는 먼저 자바 버전을 1.8버전으로, 스프링 버전을 5.0.7버전으로 바꿔줘야 합니다.

pom.xml의 <properties> 태그 내부의
<java-version>은 1.8로 고쳐주시고
<org.springframework-version>는 5.0.7RELEASE 로 고쳐줍니다.

다음 프로젝트 우클릭 -> properties -> project facet -> java를 1.8로 교체

<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-compiler-plugin</artifactId>
내부의 <source>와 <target>을 전부 1.8로 교체합니다.


여기까지 완료가 되었다면 프로젝트를 실행합니다.


## 프로젝트 실행

프로젝트 실행은 프로젝트파일 우클릭 -> run as -> run on server를 선택하면 됩니다.

이렇게 했을 때 디폴트 설정에 따르면 이클립스 내부 브라우저가 호출되기 때문에

window -> web browser -> 3. chrome driver 선택을 해 주세요.

단 프로젝트 실행시 패키지명이 url에 포함됩니다.
따라서 패키지명을 url에서 누락시키기 위해서
server탭의 서버설정을 더블클릭 해 주신 다음 -> 하단의 modules로 들어가신 다음
프로젝트 클릭 -> 우측 edit를 이용해서 루트 url을 "/" 만 남깁니다.




