##스프링 MVC의 기본적인 원리.


스프링 MVC는 컨트롤러 파일에 메서드를 작성합니다.

메서드는 여러 종류를 작성할 수 있지만 우리는 가장 기본적인

String 리턴 타입을 가지는 메서드부터 살펴보겠습니다.

String 리턴 타입 메서드는 마지막에 문자열을 리턴할 때 views 파일 경로를 적게 됩니다.

그러면 적혀있는 view 파일과 모델이 연결됩니다.

그럼 url매핑을 어떻게 시키는지가 중요한데 어노테이션
@RequestMapping 을 메서드 위에 붙이는것으로 대신합니다.

@RequestMapping은 주소값과 메서드를 지정할 수 있습니다.

뷰와 모델을 연결하는 방법은 메서드의 파라미터로 Model 내장객체를 집어넣어 연결합니다.

구체적으로 Model의 내장메서드인 addAttribute("이름", 자료); 형태로 연결하게 되며 이는 JSP시절의 setAttribute()와 유사한 방법으로 쓸 수 있습니다.<br><br>
model.addAttribute(“넘겨줄이름”, 자료);<br><br>





##컨트롤러의 인자 전달.

컨트롤러에 인자를 전달하기 위해 가장 중요한 것은 어떤 인자를 전달받을지 입니다. <br><br>스프링에서의 인자 전달은 대체로 이름이 일치하는 것을 전달하는 것으로 설정되어 있습니다.<br>

따라서 request.getParameter()를 일일히 지정해주던 JSP와는 많이 다릅니다.

먼저 컨트롤러의 인자 전달의 보편적인 방법은 @RequestParam("전달받은 파라미터명") 을 메서드 선언부에 작성하는 것입니다.

@RequestParam()의 경우는 전달받은 파라미터와 실제 파라미터명이 일치하지 않을때 사용하면 좋습니다.

만약 외부에서 들어오는 자료형에 대해 @RequestParam() 을 사용하지 않는다면 설정한 변수명와 동일한 변수에 자동으로 전달됩니다.

전달할 수 있는 자료형에는 거의 한계가 없으므로, 예제를 보면서 살펴보도록 하겠습니다.<br><br>




###@PathVariable 어노테이션을 활용한 URL명과 파라미터명 일치시키기.

@RequestMapping을 사용할 때 url에 파라미터값을 직접 전달하는 것이 아니라 url의 일부를 아예 숫자로 처리하고 싶은 경우도 있을 것입니다.

그럴 때 사용할 수 있는것이 @PathVariable 어노테이션 입니다.

사용법은 파라미터 선언부의 적용하고 싶은 변수에 @PathVariable 어노테이션을 사용해주시고, @RequestMapping 부분에는 {변수명} 으로 처리를 해 주면 됩니다.<br><br>




###타입 컨트롤러 사용해보기.

void타입은 url로 명시한 주소와 일치하는 뷰로 연결됩니다.

리턴구문을 생략 할 수 있다는 장점이 있지만 반면에 복잡한 로직을 짜는것은 무리가 있습니다. 보편적으로는 String을 더 많이 사용합니다.<br><br>



###다양한 자료형을 받는 컨트롤러.


컨트롤러는 자바에 존재하는 모든 자료형을 받을 수 있습니다.

ArrayList와 같은 배열에서부터 VO 객체 등까지 온갖 자료형을 다 받을 수 있습니다.

하지만 몇 가지 규칙을 알아야 확실하게 이해할 수 있기 때문에 몇 가지 규칙에 대해서 설명드리겠습니다.

- 리스트나 배열은 이름대로 적으면 자료가 차곡차곡 들어온다.
같은 이름으로 중복해서 자료를 넘길 수 있으며, 이렇게 받아온 리스트나 배열을 뷰에 넘길 경우는 반복문을 통해 전체 출력이 가능하다.


- VO객체같은 경우는 필드명이 중요하다. VO객체의 경우는 각각의 필드명이 존재하게 되는데, 필드명을 이용해서 자료를 입력받는다.(객체명과 무관함!)

- VO객체를 뷰로 넘길경우는 객체명.필드명 으로 출력이 가능하다.

특히 VO객체는 JDBC 프로그래밍을 할 경우 거의 100% 확률로 사용하게 되므로 미리 사용에 익숙해질 필요가 있다.

get은 폼으로 바로 데이터를 보내줌
