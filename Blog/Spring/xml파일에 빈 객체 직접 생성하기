##어노테이션을 활용한 의존성 주입의 한계

현재 @Autowired에 따르면 자료형이 일치하는 객체는 자동으로 주입이 되고 있습니다.

그렇다면 다형성 원리에 의해서 둘 이상의 객체가 의존성 주입의 타겟이 될 수 있다면 어떻게 처리되는지가 중요합니다.

불행하게도 스프링의 @Autowired는 일치하는 자료형이 두 개 이상이면 객체 주입을 포기하고 오류를 발생시켜버립니다.

요컨대, 둘 이상의 객체가 주입의 타겟이 되는 경우는 특정 객체를 지목해서 주입해야 한다는 것입니다.

따라서 @Qualifier 어노테이션을 활용해 둘 이상의 객체가 주입되는 경우는 교통정리를 해 줘야 합니다.

@Qualifier 어노테이션은 @Autowired 어노테이션 아래에 사용될 수 있습니다.

@Qualifier 어노테이션은 디폴트 생성자를 활용합니다.


혹은 @Qualifier가 싫다면 @Resource 어노테이션을 사용합니다.

@Qualifier("객체명")	Or <br>
@Resource(name="객체명") 이며,<br>
@Resource는 @Autowire와 함께 쓰이지 않고 단독으로 사용합니다.


## 어노테이션을 활용한 의존성 주입의 더 큰 문제.

@Autowired를 통한 주입시 둘 이상의 객체가 겹치는 문제는 @Qualifier 어노테이션을 활용하는것으로 해결했습니다.

그러나 만약 상황에 따라 각각의 객체가 주입된 객체가 모두 필요한 상황이라면 결국 같은 종류의 객체의 두 개 이상 xml파일 내부에 만들어야 하는 상황이 발생합니다.

이 경우 어노테이션을 이용한 의존성 주입만을 활용해서는 문제를 해결할 수 없기 때문에 xml파일에 컴포넌트 스캔 대신 바로 객체를 넘겨버리는 방식을 활용할 수 있습니다.
<br><br>
### xml파일에 빈 객체 직접 생성하기.

root-context.xml 파일 내부에는 <beans> 라는 태그가 있습니다.

말 그대로 객체들을 모아두는 태그로 내부에 <bean> 이라는 태그를 이용해 개별 객체들을 하나하나 만들어줄 수 있습니다.

<bean> 태그의 속성
id => 컨테이너 내부적으로 사용할 명칭을 부여합니다.<br>
class => 필수 속성으로 패키지명을 포함한 클래스파일의 경로를 입력하면 <br>그 클래스파일을 활용한 객체가 bean-container 내부에 생성됩니다.


< bean > 태그 내부에서 사용할 수 있는 태그

< constructor-arg >생성자 주입을 위해 사용하는 태그입니다.

< property > setter주입을 위해 사용하는 태그입니다.
<br>
###객체 꺼내기

객체를 bean-container에서 꺼내는 방식은 사실 어노테이션을 활용한 DI와 차이가 없습니다.

GenericXmlApplicationContext 객체를 활용해 getbean을 활용하면 됩니다.

다만 xml파일이 두 개 이상인 경우 한꺼번에 처리할 수 있는 방법이 있어 소개해드리겠습니다.

###xml파일 쪼개기

xml파일을 쪼개는 방법은 크게 3가지가 있습니다.

1. 경로 연달아 집어넣기
2. 문자 배열로 만들어 집어넣기
3. 와일드카드 * 활용하기
