##스프링 - 마이바티스 설정

스프링과 마이바티스는 별개의 프로그램임.
따라서 스프링과 DB를 연결해주는 JDBC가 필요했듯,

스프링과 마이바티스를 연결해줄 spring-mybatis까지 같이 설치해야함

pom.xml에 아래와 같이 의존성 추가를 해 준다.

	<!-- Mybatis -->
	<dependency>
		<groupId>org.mybatis</groupId>
		<artifactId>mybatis</artifactId>
		<version>3.4.3</version>
	</dependency> 
		
	<!-- Mybatis-spring -->
	<dependency>
		<groupId>org.mybatis</groupId>
		<artifactId>mybatis-spring</artifactId>
		<version>1.3.1</version>
	</dependency>


<br><br>
##SqlSessionFactory 객체 bean-container에 추가하기

jdbc에서 jdbcTemplate 객체를 이용해서 DB에 쿼리문을 날려줄 수 있었듯이

mybatis에서는 SqlSessionFactory 객체를 이용해 DB에 쿼리문을 날린다.

root-context.xml(혹은 빈 컨테이너를 담당하는 xml파일)
에  jdbc관련 설정을 한 다음 아래와 같이 의존성 설정을 추가한다

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- xml파일 경로를 직접 잡아야 하기때문에 /로 구분합니다. -->
		<property name="mapperLocations" 
		value="classpath:com/spring/myapp/member/dao/*.xml"/> 
	</bean>
	
	<!-- mybatis 구현 xml파일을 스캔할 수 있도록 경로 지정 -->
	<!-- 마이바티스 스캔, 컴포넌트 스캔은 패키지로 사용하기 때문에 .으로 구분합니다. -->
	<mybatis-spring:scan base-package="com.spring.myapp.member.dao"/>
	<context:component-scan base-package="com.spring.myapp.member" />
		<property name="mapperLocations" value="file:src/main/webapp/WEB-INF/spring/root-context.xml"/> 
	</bean>


### 트랜잭션 설정이 필요한 경우

트랜잭션 설정시 마이바티스는 xml파일에 구현 클래스를 작성하기 때문에

어노테이션을 이용한 트랜잭션 설정이 불가능하다.

따라서 application-config.xml 파일 등 backend 관련 설정 파일에

직접 트랜잭션 설정을 해 줘야 한다.


### 마이바티스 구현 파일을 bean-container에 넣을 수 있도록 스캔설정

application-config.xml 등의 파일에 namespace에서, mybatis-spring 체크

	<!-- mybatis 구현 xml파일을 스캔할 수 있도록 경로 지정 -->
	<mybatis-spring:scan base-package="인터페이스가 있는 패키지 경로"/>




### Mapper XML 파일 설정

일반적으로 repository(DAO) 인터페이스가 있는 경로에 같이 만들어준다.

생성시 스키마는

```
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="repository(DAO)에 해당하는 인터페이스 파일 경로"></mapper>
```


와 같이 작성하게 되며, mapper namespace="" 에 들어가는 경로에 있는
인터페이스 파일을 실제로 구현하게 됩니다.

mapper 태그 사이에 추상메서드를 구현하게 되며, 구문의 종류에 따라 각각

```SELECT문은 <select></select> 사이에 구문작성 및 설정을,```<br>
```DELETE문은 <delete></delete> 사이에 구문작성 및 설정을,```<br>
```UPDATE문은 <update></update> 사이에 구문작성 및 설정을,```<br>
```INSERT문은 <insert></insert> 사이에 구문작성 및 설정을,```<br>
<br>

###Mapper XML 코드 작성

-각 쿼리문에 따른 태그 내부에 속성을 부여해서 어떤 추상메서드를 구현할지,
리턴 타입은 어떻게 되는지, 입력받을 파라미터값에 대한 정보 등을 작성할 수 있다.


####id속성 : id="추상메서드명" 
인터페이스 파일에 있던 추상메서드를 XML파일에서 구현할 때 사용합니다.
<br><br>
####resultType : resultType="자료형"  
select 태그에서만 사용할 수 있으며(자료 조회이므로)
실제 추상 메서드의 리턴 자료형을 그대로 사용해주면 됩니다.
만약 select 메서드가 VO객체 등 클래스를 리턴하는 경우는
resultType="패키지 및 클래스파일 경로" 를 적어서, 특정 클래스를 리턴하는것도 가능합니다.
<br><br>

####parameterType : parameterType = "자료형" 
select, insert, delete, update 등 모든 구문에서 사용 가능하고
preparedstatement 구문에 입력해줄 파라미터의 자료형을 지정합니다.


-쿼리문 작성

쿼리문 작성시는 일반적인 쿼리문 형식으로 작성해줍니다.

단 preparedstatement 구문으로 작성해야 하며
? 대신 #{자료이름} 을 사용합니다.

#{} 에 전달할 자료는 인터페이스에서 파라미터값 설정시 (@Param("전달할 이름") 자료형 변수명)




###VO 등 커맨드 객체를 리턴받는 경우

VO객체에는 일반적으로 DB테이블의 컬럼명과 일치하는 명칭을 필드(멤버변수)로 사용합니다.

그러나 간혹가다 유사한 이름이되 DB의 컬럼명과 필드명이 일치하지 않는 경우가 발생합니다.

그 경우 두 가지 방법을 쓸 수 있습니다.<br><br>


### - 쿼리문 자체에서 AS 를 이용해 컬럼명 AS 필드명과 같이 이름을 일치시키는 방법.

ex)
SELECT EMPLOYEE_ID AS employeeId FROM employees

(EMPLOYEE_ID 컬럼의 명칭을 employeeId 로 바꿔서 가져와라)
<br><br>

### - xml 파일 내부에서 <resultMap> 태그 사용

resultMap 태그는 VO 객체에 대한 양식을 마련하는 것입니다.

특정 컬럼을 VO객체의 필드명으로 치환하는 양식을 미리 자료로 준비해둬서

이후에는 컬럼명 일치를 위해 긴 쿼리문을 작성할 필요 없이

정해진 양식을 자료명으로 입력해주면 간단하게 쿼리문 일치를 시킬 수 있습니다

```
<resultMap type="VO객체의 패키지 경로 및 이름" id="양식의 명칭">
<result property="드명" column="컬럼명" />	
</resultMap>
```

태그 내부에 변환양식을 작성하게 되며

type 속성은 VO객체의 패키지 경로 및 이름을 적어줍니다.
id 속성은 양식의 명칭을 적어줍니다. 변수명처럼 아무렇게나 쓰고싶은 이름을 적습니다.

<resultMap> 내부의 <result> 태그의 
property 속성에는 필드명을, column 속성에는 DB에서 사용하는 컬럼명을
적어서 매칭시키면 됩니다.







