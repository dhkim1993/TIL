##의존성 주입

의존성이란 하나의 객체가 다른 객체 없이는 제대로 된 역할을 할 수 없음을 의미합니다.

예를 들어, 음악프로그램에서 백댄서가 없어도 가수만이라도 있다면 어찌저찌 무대를 구성하는것은 가능합니다.
그런데 가수가 없고 백댄서만 있는 상황이라면 어떨까요? 이 경우는 무대 자체가 성립하지 않습니다.

이 경우는 무대가 성립하기 위해 반드시 필요한 것이 가수이므로 무대는 가수에 의존한다 라고 표현할 수 있습니다.

자바 내부로 따지면 A객체를 만드는데 A객체의 생성자가 B라는 객체를 파라미터값으로 요구한다면
A객체는 B객체 없이는 만들 수 없게 되는 것입니다. 그래서 이 관계를 가리켜 의존 관계라고 부릅니다.


주입이란 외부에서 자료를 넣어주는것을 의미합니다.

스프링에서의 의존성 주입은 바로 bean-container 개념과 함께 시작합니다.



##bean-container

bean-container는 가상의 공간입니다. 일종의 공장이라고 보셔도 좋습니다.
이 공장은 완제품을 미리 생산해뒀다가 사용자가 제품을 주문하면 바로 조립해서 가져다 주는 공장입니다.

사용자는 이 공장에 미리 의존관계를 포함한 정보를 넘겨줄 수 있으며, 
그렇게 넘어간 정보를 토대로 bean-container 내부에 객체가 미리 생성됩니다.

미리 만들어져있다는 특성으로 인해 사용자가 객체를 필요로 할 때는 직접 new 연산자를 이용해 객체를 생성하는 방식이 아니라
bean-container에 미리 완성되어 있던 객체를 받아다 쓰는 형태로 코드가 진행됩니다.



###의존성 주입 테스트(java 방식)

의존성 주입과 주입에 따른 결과물을 통해 객체관리가 얼마나 쉬워지는지를 보겠습니다.
아까 예시로 들어드린 대로 무대와 가수의 관계를 살펴보기 위해 먼저 의존관계 설정을 해 보겠습니다.

클래스 stage와 singer 를 만듭니다.
stage는 무대 객체로 singer를 주입받아 무대를 꾸미게 됩니다.

singer객체는 자기 자신이 이미 노래를 부를 수도 있지만 일반적으로는 무대에서 가수를 부르기 때문에
stage 객체의 멤버변수로 singer 객체가 선언되어 있습니다.

stage객체는 생성자를 이용해 singer를 입력받은 다음 생성됩니다.

코드를 작성한 다음 main함수 내부에서 stage 객체를 생성해보겠습니다.

작동은 잘 하지만 stage와 singer를 모두 신경써야 하기 때문에 활용이 불편합니다.



###의존성 주입 테스트(spring 방식)

스프링에서 사용하는 의존성 주입 개념을 활용하기 위해서는 먼저 객체 생성을 bean-container에 요청해서 진행해야 합니다.
따라서 bean-container에 객체를 등록하는것이 제일 먼저 할 일입니다.

등록하기 위해서는 xml파일(root-context.xml) 파일을 활용하는 것이 보편적입니다만,  
최근에는 java class파일에 등록하는 방식도 슬슬 주목을 받고 있습니다.

그렇지만 우리는 보편적으로 사용하는 xml파일 방식을 사용해서 의존성 주입을 공부해보도록 하겠습니다.



###의존성 주입을 위한 component-scan 설정

bean-container에 특정 클래스 파일을 집어넣기 위해서 사용하는 방법은

- xml파일을 사용한 클래스 수동 지정
- context 네임스페이스를 활요한 컴포넌트 스캔 지정

방식이 있습니다.

두번째 방식이 훨씬 간편하고 보편적으로 사용되기 때문에, 우리는 2번 방식을 이용하겠습니다.

bean-container라는 공간에 클래스를 등록한다는 것은 일종의 설계도를 공장에 넘기는 행위로 볼 수 있습니다.

먼저 root-context.xml 파일을 연 다음, 하단 namespace 탭에서 context에 체크를 합니다.

이렇게 하면 <context:component-scan> 태그를 활용할 수 있게 됩니다.
component-scan 태그의 속성에는 base-package가 있으며 이 곳에 스캔의 범위를 지정할 수 있습니다.

지정 범위는 패키지 명으로 조절 가능하며, 패키지명의 이름이 겹치는 곳 까지가 스캔 범위입니다.



###컴포넌트 스캔 활용 및 객체 bean-container에 등록하기.

객체를 컴포넌트 스캔 처리하기 위해서는 먼저 두 가지 조건이 필요합니다.

- 스캔 범위에 들 것.
- 클래스명 윗줄에 어노테이션을 사용할 것.


사용하는 어노테이션은 크게 4종류가 있습니다.<br>
@Component -> 용도가 애매한 객체에 사용합니다.<br>
@Controller -> 컨트롤러에 사용합니다.<br>
@Service -> 서비스 객체에 사용합니다.<br>
@Repository -> DAO 객체에 사용합니다.<br>

용도에 따라 엄격하게 구분짓지 않아도 좋습니다만, 그래도 가독성을 위해서라도 객체의 역할에 맞는 어노테이션을 써주시면 좋습니다.

컴포넌트 스캔이 정상적으로 완료되었다면, package explorer 상에서 class파일 우상단에 S 라는 표식이 생깁니다.



###등록된 객체 간 주입을 구현하는 어노테이션.

컴포넌트 스캔이 된 상태라면 우선 빈 컨테이너 내부에 객체가 만들어져 있는 상태입니다.

단, 객체는 만들어 졌으되, 주입은 일어나지 않은 상태입니다.
따라서 주입관계를 우리가 설정해야 합니다.

스프링에서는 @Autowired 어노테이션을 이용해 자동 주입을 구현합니다.
의존 객체 위에 @Autowired 어노테이션을 쓰면 bean-container가 자동으로 주입을 통한 객체생성을 진행합니다.

결국 사용자는 @Autowired를 정확하게 사용했다는 전제하에 최종 완성 객체 하나만 신경써도 됩니다.


<br>

###실제 객체 생성을 돕는 GenericXmlApplicationContext 객체


실제 객체 생성을 위해서는 GenericXmlApplicationContext 클래스의 객체를 활용해야 합니다.

먼저 GenericXmlApplicationContext context = 
	new GenericXmlApplicationContext("file:src/main/webapp/WEB-INF/spring/root-context.xml");

과 같이 component-scan을 사용한 xml파일을 이용해 GenericXmlApplicationContext 객체를 생성합니다.

위의 예시에 따라 만들어진 context라는 이름의 객체는 getbean(); 메서드를 이용해 내부 객체를 생성할 수 있습니다.

